= Git-Diff-Fileset =

本工具利用Git等代码仓库生成的 `diff` (patch)文件, 复制得到一份两次提交之间的差异文件集. (保留目录结果, 文件信息). 

该工具意在用于网站程序上线后, 在本地进行了多次代码更新, 需要使用FTP等工具本地将修改的文件集批量上传到服务器, 得到服务器和本地代码同步.

== 用例 ==

假设你已经将整个应用程序的代码上传到服务器, 然后在本地进行了功能扩展, 修改或增加了一部分文件, 而在本地测试完毕后需要将它们上传到服务器. 在上一次与服务器同步之后, 你在本地进行了一次代码提交. 例如你的 commit log :

------------------------------------------
commit 2 5b6a52ea652eec20871c6285e00a03bef785edcc
Date:   Thu Apr 28 12:35:31 2011 +0800

commit 1 e4ef18425c6c49aefa92bb46c847be16b2de019e
Date:   Thu Apr 28 11:34:05 2011 +0800
------------------------------------------

commit 1 的文件和服务器是同步的, 你只需要将 commit 2 的修改集上传到服务器.在在commit 2中你一共修改了三个文件:
-----------------------
M /css/style.css
M /js/script.js 
M /index.php
-----------------------

=== 生成Patch文件 ===

利用git diff命令生成补丁文件.
------------------------------------------
git diff master^ > change.diff
------------------------------------------

=== 得到修改集文件拷贝 ===

使用本工具得到一个修改集, 并保留目录结构和基本文件信息(最后修改时间等).

------------------------------------------------------------
java --jar git-diff.jar -dir /path/to/your/project change.diff
-----------------------------------------------------------

其中dir参数为你的代码跟目录, 即 .git 文件夹的所在; change.diff 为上一步生成的补丁文件.

之后便得到一个拷贝目录, 将包含此次提交的所有修改文件:

---------------------------
/copy/
/copy/index.php
/copy/css/style.css
/copy/js/script.js
---------------------------

=== 使用FTP上传到服务器 ===

你只需使用喜欢的FTP客户端, 把这个目录上传到服务器上相对应的目录即可. 

然后可以冲杯茶, 让代码飞一会.

